public class Foothill
{

   public static void main(String[] args)
   {
      int k;
      Student student;

      Student[] myClass =
         {new Student("smith", "fred", 95), new Student("bauer", "jack", 123),
               new Student("jacobs", "carrie", 195),
               new Student("renquist", "abe", 148),
               new Student("3ackson", "trevor", 108),
               new Student("perry", "fred", 225),
               new Student("loceff", "fred", 44),
               new Student("renquist", "abe", 148),
               new Student("3ackson", "trevor", 108),
               new Student("perry", "fred", 225),
               new Student("loceff", "fred", 44),
               new Student("renquist", "abe", 148),
               new Student("3ackson", "trevor", 108),
               new Student("perry", "fred", 225),
               new Student("loceff", "fred", 44),
               new Student("stollings", "pamela", 452),
               new Student("charters", "rodney", 295),
               new Student("cassar", "john", 321),};

      // instantiate a StudArrUtilObject
      StudentArrayUtilities myStuds = new StudentArrayUtilities();

      // we can add stdunts manually and individually
      myStuds.addStudent(new Student("bartman", "petra", 102));
      myStuds.addStudent(new Student("charters", "rodney", 295));

      for (k = 0; k < myClass.length; k++)
         myStuds.addStudent(myClass[k]);

      System.out.println(myStuds.toString("Before: "));

      myStuds.arraySort();
      System.out.println(myStuds.toString("Sorting by default: "));

      Student.setSortKey(Student.SORT_BY_FIRST);
      myStuds.arraySort();
      System.out.println(myStuds.toString("Sorting by first name: "));

      Student.setSortKey(Student.SORT_BY_POINTS);
      myStuds.arraySort();
      System.out.println(myStuds.toString("Sorting by total points: "));

      // test median
      System.out.println(
            "Median of evenClass = " + myStuds.getMedianDestructive() + "\n");

      // various tests of removing and adding too many students
      for (k = 0; k < 100; k++)
      {
         if ((student = myStuds.removeStudent()) != null)
            System.out.println("Removed " + student);
         else
         {
            System.out.println("Empty after " + k + " removes.");
            break;
         }
      }

      for (k = 0; k < 100; k++)
      {
         if (!myStuds.addStudent(new Student("first", "last", 22)))
         {
            System.out.println("Full after " + k + " adds.");
            break;
         }
      }

   }

}

class Student
{
   private String lastName;
   private String firstName;
   private int totalPoints;
   private static int sortKey;

   public static final String DEFAULT_FIRST_NAME = "theo";
   public static final String DEFAULT_NAME = "zz-error";
   public static final int DEFAULT_POINTS = 0;
   public static final int MAX_POINTS = 1000;

   public static final int SORT_BY_FIRST = 88;
   public static final int SORT_BY_LAST = 98;
   public static final int SORT_BY_POINTS = 108;

   // constructor requires parameters - no default supplied
   public Student(String last, String first, int points)
   {
      if (!setFirstName(first))
         firstName = DEFAULT_FIRST_NAME;
      if (!setLastName(last))
         lastName = DEFAULT_NAME;
      if (!setPoints(points))
         totalPoints = DEFAULT_POINTS;
      sortKey = SORT_BY_LAST;
   }

   public String getLastName()
   {
      return lastName;
   }
   public int getTotalPoints()
   {
      return totalPoints;
   }

   public static int getSortKey()
   {
      return sortKey;
   }

   public static boolean setSortKey(int key)
   {
      if (!validKey(key))
         return false;
      sortKey = key;
      return true;
   }

   public boolean setFirstName(String first)
   {
      if (!validString(first))
         return false;
      firstName = first;
      return true;
   }

   public boolean setLastName(String last)
   {
      if (!validString(last))
         return false;
      lastName = last;
      return true;
   }

   public boolean setPoints(int pts)
   {
      if (!validPoints(pts))
         return false;
      totalPoints = pts;
      return true;
   }

   // could be an instance method and, if so, would take one parameter
   public static int compareTwoStudents(Student firstStud, Student secondStud)
   {
      int result = 0;

      switch (sortKey)
      {
         case Student.SORT_BY_FIRST :
            result = firstStud.firstName
            .compareToIgnoreCase(secondStud.firstName);
            break;
         case Student.SORT_BY_LAST :
            result = firstStud.lastName
            .compareToIgnoreCase(secondStud.lastName);
            break;
         case Student.SORT_BY_POINTS :
            result = Integer.compare(firstStud.totalPoints,
                  secondStud.totalPoints);
            break;
         default :
            return 0;
      }

      return result;
   }

   public String toString()
   {
      String resultString;

      resultString = " " + lastName + ", " + firstName + " points: "
            + totalPoints + "\n";
      return resultString.toLowerCase();
   }

   private static boolean validKey(int key)
   {
      if (key != Student.SORT_BY_FIRST && key != Student.SORT_BY_LAST
            && key != Student.SORT_BY_POINTS)
      {
         return false;
      }
      return true;

   }

   private static boolean validString(String testStr)
   {
      if (testStr != null && Character.isLetter(testStr.charAt(0)))
         return true;
      return false;
   }

   private static boolean validPoints(int testPoints)
   {
      if (testPoints >= 0 && testPoints <= MAX_POINTS)
         return true;
      return false;
   }
}

class StudentArrayUtilities
{

   public static final int MAX_STUDENTS = 20;

   private Student[] theArray = new Student[MAX_STUDENTS];
   private int numStudents = 0;

   public boolean addStudent(Student stud)
   {
      if (stud == null || numStudents == MAX_STUDENTS)
      {
         return false;
      } else
      {
         theArray[numStudents] = stud;
         numStudents += 1;
         return true;
      }
   }

   public Student removeStudent()
   {
      if (numStudents == 0)
      {
         return null;
      }
      Student studentToRemove = theArray[numStudents - 1];
      theArray[numStudents - 1] = null;
      numStudents -= 1;
      return studentToRemove;
   }

   public String toString(String title)
   {
      String output = "";

      // build the output string from the individual Students:
      for (int k = 0; k < theArray.length; k++)
         output += " " + theArray[k].toString();

      return output;
   }

   public double getMedianDestructive()
   {

      int len = theArray.length;
      if (len == 0)
         return 0.0;
      else if (len == 1)
         return theArray[0].getTotalPoints();
      else
      {
         int currentSortKey = Student.getSortKey();

         Student.setSortKey(Student.SORT_BY_POINTS);

         int middle = len / 2;

         if (len % 2 == 0)
         {
            // even
            // take average
            arraySort();
            double average = (theArray[middle - 1].getTotalPoints()
                  + theArray[middle].getTotalPoints()) / 2;
            Student.setSortKey(currentSortKey);

            return average;

         } else
         {
            // odd
            arraySort();
            Student.setSortKey(currentSortKey);
            return theArray[middle].getTotalPoints();
         }

      }
   }

   // returns true if a modification was made to the array
   private boolean floatLargestToTop(int top)
   {
      boolean changed = false;
      Student temp;

      // compare with client call to see where the loop stops
      for (int k = 0; k < top; k++)
         if (Student.compareTwoStudents(theArray[k], theArray[k + 1]) > 0)
         {
            temp = theArray[k];
            theArray[k] = theArray[k + 1];
            theArray[k + 1] = temp;
            changed = true;
         }
      return changed;
   }

   // public callable arraySort() - assumes Student class has a compareTo()
   public void arraySort()
   {
      for (int k = 0; k < theArray.length; k++)
         // compare with method def to see where inner loop stops
         if (!floatLargestToTop(theArray.length - 1 - k))
            return;
   }

   public static int arraySearch(Student[] array, String keyFirst,
         String keyLast)
   {
      for (int k = 0; k < array.length; k++)
         if (array[k].getLastName().equals(keyLast))
            return k; // found match, return index

      return -1; // fell through - no match
   }

   public static int binarySearch(Student[] array, String keyLast,
         int firstIndex, int lastIndex)
   {
      int middleIndex, result;

      if (firstIndex > lastIndex)
         return -1;

      middleIndex = (firstIndex + lastIndex) / 2;
      result = keyLast.compareToIgnoreCase(array[middleIndex].getLastName());

      if (result == 0)
         return middleIndex; // found him!
      else if (result < 0)
         return binarySearch(array, keyLast, firstIndex, middleIndex - 1);
      else
         return binarySearch(array, keyLast, middleIndex + 1, lastIndex);
   }
}


/ Console Output /
  bartman, petra points: 102
  charters, rodney points: 295
  smith, fred points: 95
  bauer, jack points: 123
  jacobs, carrie points: 195
  renquist, abe points: 148
  zz-error, trevor points: 108
  perry, fred points: 225
  loceff, fred points: 44
  renquist, abe points: 148
  zz-error, trevor points: 108
  perry, fred points: 225
  loceff, fred points: 44
  renquist, abe points: 148
  zz-error, trevor points: 108
  perry, fred points: 225
  loceff, fred points: 44
  stollings, pamela points: 452
  charters, rodney points: 295
  cassar, john points: 321

  bartman, petra points: 102
  bauer, jack points: 123
  cassar, john points: 321
  charters, rodney points: 295
  charters, rodney points: 295
  jacobs, carrie points: 195
  loceff, fred points: 44
  loceff, fred points: 44
  loceff, fred points: 44
  perry, fred points: 225
  perry, fred points: 225
  perry, fred points: 225
  renquist, abe points: 148
  renquist, abe points: 148
  renquist, abe points: 148
  smith, fred points: 95
  stollings, pamela points: 452
  zz-error, trevor points: 108
  zz-error, trevor points: 108
  zz-error, trevor points: 108

  renquist, abe points: 148
  renquist, abe points: 148
  renquist, abe points: 148
  jacobs, carrie points: 195
  loceff, fred points: 44
  loceff, fred points: 44
  loceff, fred points: 44
  perry, fred points: 225
  perry, fred points: 225
  perry, fred points: 225
  smith, fred points: 95
  bauer, jack points: 123
  cassar, john points: 321
  stollings, pamela points: 452
  bartman, petra points: 102
  charters, rodney points: 295
  charters, rodney points: 295
  zz-error, trevor points: 108
  zz-error, trevor points: 108
  zz-error, trevor points: 108

  loceff, fred points: 44
  loceff, fred points: 44
  loceff, fred points: 44
  smith, fred points: 95
  bartman, petra points: 102
  zz-error, trevor points: 108
  zz-error, trevor points: 108
  zz-error, trevor points: 108
  bauer, jack points: 123
  renquist, abe points: 148
  renquist, abe points: 148
  renquist, abe points: 148
  jacobs, carrie points: 195
  perry, fred points: 225
  perry, fred points: 225
  perry, fred points: 225
  charters, rodney points: 295
  charters, rodney points: 295
  cassar, john points: 321
  stollings, pamela points: 452

Median of evenClass = 148.0

Removed  stollings, pamela points: 452

Removed  cassar, john points: 321

Removed  charters, rodney points: 295

Removed  charters, rodney points: 295

Removed  perry, fred points: 225

Removed  perry, fred points: 225

Removed  perry, fred points: 225

Removed  jacobs, carrie points: 195

Removed  renquist, abe points: 148

Removed  renquist, abe points: 148

Removed  renquist, abe points: 148

Removed  bauer, jack points: 123

Removed  zz-error, trevor points: 108

Removed  zz-error, trevor points: 108

Removed  zz-error, trevor points: 108

Removed  bartman, petra points: 102

Removed  smith, fred points: 95

Removed  loceff, fred points: 44

Removed  loceff, fred points: 44

Removed  loceff, fred points: 44

Empty after 20 removes.
Full after 20 adds.